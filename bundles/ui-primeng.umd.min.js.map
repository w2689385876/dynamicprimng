{"version":3,"file":"ui-primeng.umd.min.js","sources":["../../../../packages/ui-primeng/src/dynamic-primeng-form.const.ts","../../../../packages/ui-primeng/src/dynamic-primeng-form-control.component.ts","../../../../packages/ui-primeng/src/dynamic-primeng-form.component.ts","../../../../packages/ui-primeng/src/dynamic-primeng-form-ui.module.ts"],"sourcesContent":["export enum PrimeNGFormControlType {\n\n    Array = 1, //\"ARRAY\",\n    AutoComplete = 2, //\"AUTOCOMPLETE\",\n    Calendar = 3, //\"CALENDAR\",\n    Checkbox = 4, //\"CHECKBOX\",\n    Chips = 5, //\"CHIPS\",\n    ColorPicker = 6, //COLOR_PICKER\n    Dropdown = 7, //\"DROPDOWN\",\n    Editor = 8, //\"EDITOR\",\n    Group = 9, //\"GROUP\",\n    Input = 10, //\"INPUT\",\n    InputMask = 11, //\"INPUT_MASK\",\n    InputSwitch = 12, //\"INPUT_SWITCH\",\n    MultiSelect = 13, //\"MULTI_SELECT\",\n    RadioGroup = 14, //\"RADIO_GROUP\",\n    Rating = 15, // \"RATING\",\n    Slider = 16, //\"SLIDER\",\n    Spinner = 17, //\"SPINNER,\n    TextArea = 18, //\"TEXTAREA\"\n}\n\nexport const PRIME_NG_VIEW_CHILD_SELECTOR = `pAutoComplete,pCalendar,pCheckbox,pChips,pColorPicker,pDropdown,pEditor,\npInputMask,pInputSwitch,pInputText,pMultiSelect,pRating,pSlider,pSpinner,pInputTextarea`;\n\nexport const PRIME_NG_AUTOCOMPLETE_TEMPLATE_DIRECTIVES = {\n\n    itemTemplate: \"itemTemplate\",\n    selectedItemTemplate: \"selectedItemTemplate\"\n};\n\nexport const PRIME_NG_CHIPS_TEMPLATE_DIRECTIVES = {\n\n    itemTemplate: \"itemTemplate\"\n};\n\nexport const PRIME_NG_DROPDOWN_LIST_TEMPLATE_DIRECTIVES = {\n\n    itemTemplate: \"itemTemplate\"\n};","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    QueryList,\n    SimpleChanges,\n    ViewChild\n} from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    AutoComplete,\n    Calendar,\n    Checkbox,\n    Chips,\n    ColorPicker,\n    Dropdown,\n    Editor,\n    InputMask,\n    InputSwitch,\n    MultiSelect,\n    Rating,\n    Slider,\n    Spinner\n} from \"primeng/primeng\";\nimport {\n    DynamicFormArrayGroupModel,\n    DynamicFormControlComponent,\n    DynamicFormControlEvent,\n    DynamicFormControlModel,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService,\n    DynamicTemplateDirective,\n    DynamicInputModel,\n    DynamicSelectModel,\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX,\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP,\n    DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER,\n    DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\n    DYNAMIC_FORM_CONTROL_TYPE_EDITOR,\n    DYNAMIC_FORM_CONTROL_TYPE_GROUP,\n    DYNAMIC_FORM_CONTROL_TYPE_INPUT,\n    DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER,\n    DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP,\n    DYNAMIC_FORM_CONTROL_TYPE_RATING,\n    DYNAMIC_FORM_CONTROL_TYPE_SELECT,\n    DYNAMIC_FORM_CONTROL_TYPE_SLIDER,\n    DYNAMIC_FORM_CONTROL_TYPE_SWITCH,\n    DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA,\n    DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER\n} from \"@ng-dynamic-forms/core\";\nimport {\n    PrimeNGFormControlType,\n    PRIME_NG_VIEW_CHILD_SELECTOR,\n    PRIME_NG_AUTOCOMPLETE_TEMPLATE_DIRECTIVES,\n    PRIME_NG_CHIPS_TEMPLATE_DIRECTIVES,\n    PRIME_NG_DROPDOWN_LIST_TEMPLATE_DIRECTIVES\n} from \"./dynamic-primeng-form.const\";\n\nexport type PrimeNGFormControlComponent = AutoComplete | Calendar | Checkbox | Chips | ColorPicker | Dropdown | Editor |\n    InputMask | InputSwitch | MultiSelect | Rating | Slider | Spinner;\n\n@Component({\n    selector: \"dynamic-primeng-form-control,dynamic-form-primeng-control\",\n    templateUrl: \"./dynamic-primeng-form-control.component.html\"\n})\nexport class DynamicPrimeNGFormControlComponent extends DynamicFormControlComponent implements OnChanges {\n\n    @ContentChildren(DynamicTemplateDirective) contentTemplateList: QueryList<DynamicTemplateDirective>;\n    @Input(\"templates\") inputTemplateList: QueryList<DynamicTemplateDirective>;\n\n    @Input() bindId: boolean = true;\n    @Input() context: DynamicFormArrayGroupModel | null = null;\n    @Input() group: FormGroup;\n    @Input() hasErrorMessaging: boolean = false;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicFormControlModel;\n\n    @Output(\"dfBlur\") blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"dfChange\") change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"dfFocus\") focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"pEvent\") customEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n\n    @ViewChild(PRIME_NG_VIEW_CHILD_SELECTOR) pViewChild: PrimeNGFormControlComponent | undefined;\n\n    suggestions: string[];\n\n    type: PrimeNGFormControlType | null;\n\n    constructor(protected changeDetectorRef: ChangeDetectorRef, protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService) {\n\n        super(changeDetectorRef, layoutService, validationService);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        super.ngOnChanges(changes);\n\n        if (changes[\"model\"]) {\n            this.type = DynamicPrimeNGFormControlComponent.getFormControlType(this.model);\n        }\n    }\n\n    protected setTemplateDirective(directive: DynamicTemplateDirective): void {\n\n        if (this.pViewChild && (directive.modelId === this.model.id || directive.modelType === this.model.type)) {\n\n            let templateDirectives: any = DynamicPrimeNGFormControlComponent.getTemplateDirectives(this.pViewChild);\n\n            Object.keys(templateDirectives || {}).forEach((key: string) => {\n\n                if (templateDirectives[key] === directive.as) {\n                    (this.pViewChild as any)[key] = directive.templateRef;\n                }\n            });\n        }\n    }\n\n    protected setTemplates(): void {\n\n        super.setTemplates();\n\n        this.templateList\n            .filter(template => typeof template.as === \"string\")\n            .forEach(template => this.setTemplateDirective(template));\n    }\n\n    onAutoComplete(_$event: any): void {\n        let inputModel = this.model as DynamicInputModel;\n\n        if(Array.isArray(inputModel.list)) {\n            this.suggestions = inputModel.list.map(item => item);\n        }\n    }\n\n    static getFormControlType(model: DynamicFormControlModel): PrimeNGFormControlType | null {\n\n        switch (model.type) {\n\n            case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n                return PrimeNGFormControlType.Array;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n                return PrimeNGFormControlType.Checkbox;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n            case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                return PrimeNGFormControlType.Group;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER:\n                return PrimeNGFormControlType.ColorPicker;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:\n            case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:\n                return PrimeNGFormControlType.Calendar;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_EDITOR:\n                return PrimeNGFormControlType.Editor;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n                let inputModel = model as DynamicInputModel;\n\n                if (inputModel.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER) {\n                    return PrimeNGFormControlType.Spinner;\n\n                } else if (inputModel.mask) {\n                    return PrimeNGFormControlType.InputMask;\n\n                } else if (Array.isArray(inputModel.list)) {\n                    return PrimeNGFormControlType.AutoComplete;\n\n                } else if (inputModel.multiple) {\n                    return PrimeNGFormControlType.Chips;\n\n                } else {\n                    return PrimeNGFormControlType.Input;\n                }\n\n            case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n                return PrimeNGFormControlType.RadioGroup;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_RATING:\n                return PrimeNGFormControlType.Rating;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n                let selectModel = model as DynamicSelectModel<any>;\n\n                return selectModel.multiple ? PrimeNGFormControlType.MultiSelect : PrimeNGFormControlType.Dropdown;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:\n                return PrimeNGFormControlType.Slider;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:\n                return PrimeNGFormControlType.InputSwitch;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n                return PrimeNGFormControlType.TextArea;\n\n            default:\n                return null;\n        }\n    }\n\n    static getTemplateDirectives(component: PrimeNGFormControlComponent): any | null {\n\n        switch (component.constructor) {\n\n            case AutoComplete:\n                return PRIME_NG_AUTOCOMPLETE_TEMPLATE_DIRECTIVES;\n\n            case Chips:\n                return PRIME_NG_CHIPS_TEMPLATE_DIRECTIVES;\n\n            case Dropdown:\n                return PRIME_NG_DROPDOWN_LIST_TEMPLATE_DIRECTIVES;\n\n            default:\n                return null;\n        }\n    }\n}","import { Component, ContentChildren, EventEmitter, Input, Output, QueryList, ViewChildren } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    DynamicFormComponent,\n    DynamicFormControlEvent,\n    DynamicFormControlModel,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormService,\n    DynamicTemplateDirective,\n} from \"@ng-dynamic-forms/core\";\nimport { DynamicPrimeNGFormControlComponent } from \"./dynamic-primeng-form-control.component\";\n\n@Component({\n    selector: \"dynamic-primeng-form\",\n    templateUrl: \"./dynamic-primeng-form.component.html\"\n})\nexport class DynamicPrimeNGFormComponent extends DynamicFormComponent {\n\n    @Input(\"group\") formGroup: FormGroup;\n    @Input(\"model\") formModel: DynamicFormControlModel[];\n    @Input(\"layout\") formLayout: DynamicFormLayout;\n\n    @Output(\"dfBlur\") blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"dfChange\") change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"dfFocus\") focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"pEvent\") customEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n\n    @ContentChildren(DynamicTemplateDirective) templates: QueryList<DynamicTemplateDirective>;\n\n    @ViewChildren(DynamicPrimeNGFormControlComponent) components: QueryList<DynamicPrimeNGFormControlComponent>;\n\n    constructor(protected formService: DynamicFormService, protected layoutService: DynamicFormLayoutService) {\n        super(formService, layoutService);\n    }\n}","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { DynamicFormsCoreModule } from \"@ng-dynamic-forms/core\";\nimport { DynamicPrimeNGFormControlComponent } from \"./dynamic-primeng-form-control.component\";\nimport {\n    AutoCompleteModule,\n    CalendarModule,\n    CheckboxModule,\n    ChipsModule,\n    ColorPickerModule,\n    DropdownModule,\n    EditorModule,\n    InputMaskModule,\n    InputSwitchModule,\n    InputTextModule,\n    InputTextareaModule,\n    MultiSelectModule,\n    RadioButtonModule,\n    RatingModule,\n    SliderModule,\n    SpinnerModule\n} from \"primeng/primeng\";\nimport { DynamicPrimeNGFormComponent } from \"./dynamic-primeng-form.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        DynamicFormsCoreModule,\n        AutoCompleteModule,\n        CalendarModule,\n        CheckboxModule,\n        ChipsModule,\n        ColorPickerModule,\n        DropdownModule,\n        EditorModule,\n        InputMaskModule,\n        InputSwitchModule,\n        InputTextModule,\n        InputTextareaModule,\n        MultiSelectModule,\n        RadioButtonModule,\n        RatingModule,\n        SliderModule,\n        SpinnerModule\n    ],\n    declarations: [\n        DynamicPrimeNGFormControlComponent,\n        DynamicPrimeNGFormComponent\n    ],\n    exports: [\n        DynamicFormsCoreModule,\n        DynamicPrimeNGFormControlComponent,\n        DynamicPrimeNGFormComponent\n    ]\n})\nexport class DynamicFormsPrimeNGUIModule {\n}"],"names":["PRIME_NG_VIEW_CHILD_SELECTOR","PRIME_NG_AUTOCOMPLETE_TEMPLATE_DIRECTIVES","itemTemplate","selectedItemTemplate","PRIME_NG_CHIPS_TEMPLATE_DIRECTIVES","PRIME_NG_DROPDOWN_LIST_TEMPLATE_DIRECTIVES","changeDetectorRef","layoutService","validationService","_super","_this","EventEmitter","__extends","DynamicPrimeNGFormControlComponent","changes","ngOnChanges","this","type","getFormControlType","model","directive","pViewChild","modelId","id","modelType","templateDirectives_1","getTemplateDirectives","Object","keys","forEach","key","as","templateRef","setTemplates","templateList","filter","template","setTemplateDirective","_$event","inputModel","Array","isArray","list","suggestions","map","item","DYNAMIC_FORM_CONTROL_TYPE_ARRAY","PrimeNGFormControlType","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX","Checkbox","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP","DYNAMIC_FORM_CONTROL_TYPE_GROUP","Group","DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER","ColorPicker","DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER","DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER","Calendar","DYNAMIC_FORM_CONTROL_TYPE_EDITOR","Editor","DYNAMIC_FORM_CONTROL_TYPE_INPUT","inputType","DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER","Spinner","mask","InputMask","AutoComplete","multiple","Chips","Input","DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP","RadioGroup","DYNAMIC_FORM_CONTROL_TYPE_RATING","Rating","DYNAMIC_FORM_CONTROL_TYPE_SELECT","MultiSelect","Dropdown","DYNAMIC_FORM_CONTROL_TYPE_SLIDER","Slider","DYNAMIC_FORM_CONTROL_TYPE_SWITCH","InputSwitch","DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA","TextArea","component","constructor","Component","selector","ChangeDetectorRef","DynamicFormLayoutService","DynamicFormValidationService","ContentChildren","DynamicTemplateDirective","Output","ViewChild","DynamicFormControlComponent","formService","DynamicFormService","ViewChildren","DynamicFormComponent","NgModule","imports","CommonModule","ReactiveFormsModule","DynamicFormsCoreModule","AutoCompleteModule","CalendarModule","CheckboxModule","ChipsModule","ColorPickerModule","DropdownModule","EditorModule","InputMaskModule","InputSwitchModule","InputTextModule","InputTextareaModule","MultiSelectModule","RadioButtonModule","RatingModule","SliderModule","SpinnerModule","declarations","DynamicPrimeNGFormComponent","exports"],"mappings":"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"}