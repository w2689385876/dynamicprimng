!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("@ng-dynamic-forms/core"),require("primeng/primeng"),require("@angular/common")):"function"==typeof define&&define.amd?define(["exports","@angular/core","@angular/forms","@ng-dynamic-forms/core","primeng/primeng","@angular/common"],t):t((e.ngDF=e.ngDF||{},e.ngDF.primengUI={}),e.ng.core,e.ng.forms,e.ngDF.core,e["primeng/primeng"],e.ng.common)}(this,function(e,t,o,n,l,a){"use strict";var r={Array:1,AutoComplete:2,Calendar:3,Checkbox:4,Chips:5,ColorPicker:6,Dropdown:7,Editor:8,Group:9,Input:10,InputMask:11,InputSwitch:12,MultiSelect:13,RadioGroup:14,Rating:15,Slider:16,Spinner:17,TextArea:18};r[r.Array]="Array",r[r.AutoComplete]="AutoComplete",r[r.Calendar]="Calendar",r[r.Checkbox]="Checkbox",r[r.Chips]="Chips",r[r.ColorPicker]="ColorPicker",r[r.Dropdown]="Dropdown",r[r.Editor]="Editor",r[r.Group]="Group",r[r.Input]="Input",r[r.InputMask]="InputMask",r[r.InputSwitch]="InputSwitch",r[r.MultiSelect]="MultiSelect",r[r.RadioGroup]="RadioGroup",r[r.Rating]="Rating",r[r.Slider]="Slider",r[r.Spinner]="Spinner",r[r.TextArea]="TextArea";var i="pAutoComplete,pCalendar,pCheckbox,pChips,pColorPicker,pDropdown,pEditor,\npInputMask,pInputSwitch,pInputText,pMultiSelect,pRating,pSlider,pSpinner,pInputTextarea",d={itemTemplate:"itemTemplate",selectedItemTemplate:"selectedItemTemplate"},s={itemTemplate:"itemTemplate"},m={itemTemplate:"itemTemplate"},p=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),c=function(e){function o(o,n,l){var a=e.call(this,o,n,l)||this;return a.changeDetectorRef=o,a.layoutService=n,a.validationService=l,a.bindId=!0,a.context=null,a.hasErrorMessaging=!1,a.blur=new t.EventEmitter,a.change=new t.EventEmitter,a.focus=new t.EventEmitter,a.customEvent=new t.EventEmitter,a}return p(o,e),o.prototype.ngOnChanges=function(t){e.prototype.ngOnChanges.call(this,t),t.model&&(this.type=o.getFormControlType(this.model))},o.prototype.setTemplateDirective=function(e){var t=this;if(this.pViewChild&&(e.modelId===this.model.id||e.modelType===this.model.type)){var n=o.getTemplateDirectives(this.pViewChild);Object.keys(n||{}).forEach(function(o){n[o]===e.as&&(t.pViewChild[o]=e.templateRef)})}},o.prototype.setTemplates=function(){var t=this;e.prototype.setTemplates.call(this),this.templateList.filter(function(e){return"string"==typeof e.as}).forEach(function(e){return t.setTemplateDirective(e)})},o.prototype.onAutoComplete=function(e){var t=this.model;Array.isArray(t.list)&&(this.suggestions=t.list.map(function(e){return e}))},o.getFormControlType=function(e){switch(e.type){case n.DYNAMIC_FORM_CONTROL_TYPE_ARRAY:return r.Array;case n.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:return r.Checkbox;case n.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:case n.DYNAMIC_FORM_CONTROL_TYPE_GROUP:return r.Group;case n.DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER:return r.ColorPicker;case n.DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:case n.DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:return r.Calendar;case n.DYNAMIC_FORM_CONTROL_TYPE_EDITOR:return r.Editor;case n.DYNAMIC_FORM_CONTROL_TYPE_INPUT:var t=e;return t.inputType===n.DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER?r.Spinner:t.mask?r.InputMask:Array.isArray(t.list)?r.AutoComplete:t.multiple?r.Chips:r.Input;case n.DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:return r.RadioGroup;case n.DYNAMIC_FORM_CONTROL_TYPE_RATING:return r.Rating;case n.DYNAMIC_FORM_CONTROL_TYPE_SELECT:return e.multiple?r.MultiSelect:r.Dropdown;case n.DYNAMIC_FORM_CONTROL_TYPE_SLIDER:return r.Slider;case n.DYNAMIC_FORM_CONTROL_TYPE_SWITCH:return r.InputSwitch;case n.DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:return r.TextArea;default:return null}},o.getTemplateDirectives=function(e){switch(e.constructor){case l.AutoComplete:return d;case l.Chips:return s;case l.Dropdown:return m;default:return null}},o.decorators=[{type:t.Component,args:[{selector:"dynamic-primeng-form-control,dynamic-form-primeng-control",template:'<div [formGroup]="group" [ngClass]="[getClass(\'element\', \'container\'), getClass(\'grid\', \'container\')]"><div *ngIf="type !== 4 && model.label" [ngClass]="getClass(\'grid\', \'label\')"><label [for]="model.id" [innerHTML]="model.label" [ngClass]="getClass(\'element\', \'label\')"></label></div><ng-container *ngTemplateOutlet="templates[0]?.templateRef; context: model"></ng-container><div *ngIf="type === 9" role="group" [dynamicId]="bindId && model.id" [formGroupName]="model.id" [ngClass]="[getClass(\'element\', \'control\'), getClass(\'grid\', \'control\')]"><dynamic-primeng-form-control *ngFor="let _model of model.group" [group]="control" [hasErrorMessaging]="_model.hasErrorMessages" [hidden]="_model.hidden" [layout]="layout" [model]="_model " [templates]="templateList" [ngClass]="[getClass(\'element\', \'host\', _model), getClass(\'grid\', \'host\', _model)]" (dfBlur)="onBlur($event)" (dfChange)="onValueChange($event)" (dfFocus)="onFocus($event)" (pEvent)="onCustomEvent($event)"></dynamic-primeng-form-control></div><div *ngIf="type === 14" role="radiogroup" [dynamicId]="bindId && model.id" [ngClass]="[getClass(\'element\', \'control\'), getClass(\'grid\', \'control\')]" [tabindex]="model.tabIndex"><div *ngFor="let option of model.options$ | async" [ngClass]="getClass(\'grid\', \'option\')"><p-radioButton [formControlName]="model.id" [label]="option.label" [name]="model.id" [ngClass]="getClass(\'element\', \'option\')" [value]="option.value" (click)="onValueChange($event)"></p-radioButton></div></div><ng-container *ngIf="type !== 9 && type !== 14"><div [ngClass]="getClass(\'grid\', \'control\')" [ngSwitch]="type"><div *ngSwitchCase="1" [dynamicId]="bindId && model.id" [formArrayName]="model.id" [ngClass]="getClass(\'element\', \'control\')"><div *ngFor="let groupModel of model.groups; let idx = index" role="group" [formGroupName]="idx" [ngClass]="[getClass(\'element\', \'group\'), getClass(\'grid\', \'group\')]"><dynamic-primeng-form-control *ngFor="let _model of groupModel.group" [bindId]="false" [context]="groupModel" [group]="control.at(idx)" [hasErrorMessaging]="_model.hasErrorMessages" [hidden]="_model.hidden" [layout]="layout" [model]="_model" [templates]="templateList" [ngClass]="[getClass(\'element\', \'host\', _model), getClass(\'grid\', \'host\', _model)]" (dfBlur)="onBlur($event)" (dfChange)="onValueChange($event)" (dfFocus)="onFocus($event)" (pEvent)="onCustomEvent($event)"></dynamic-primeng-form-control><ng-container *ngTemplateOutlet="templates[2]?.templateRef; context: groupModel"></ng-container></div></div><p-autoComplete *ngSwitchCase="2" #pAutoComplete [autoHighlight]="getAdditional(\'autoHighlight\', false)" [delay]="getAdditional(\'delay\', 300)" [dropdown]="getAdditional(\'dropdown\', false)" [dynamicId]="bindId && model.id" [emptyMessage]="getAdditional(\'emptyMessage\', null)" [forceSelection]="getAdditional(\'forceSelection\', false)" [formControlName]="model.id" [minLength]="getAdditional(\'minLength\', 1)" [multiple]="model.multiple" [ngClass]="getClass(\'element\', \'control\')" [placeholder]="model.placeholder" [scrollHeight]="getAdditional(\'scrollHeight\', \'200px\')" [suggestions]="suggestions" [tabindex]="model.tabIndex" (onBlur)="onBlur($event)" (change)="onValueChange($event)" (onClear)="onCustomEvent($event, \'onClear\')" (onDropdownClick)="onCustomEvent($event, \'onDropdownClick\')" (onFocus)="onFocus($event)" (onSelect)="onCustomEvent($event, \'onSelect\')" (onUnselect)="onCustomEvent($event, \'onUnselect\')" (completeMethod)="onAutoComplete($event)"></p-autoComplete><p-calendar *ngSwitchCase="3" #pCalendar [dateFormat]="model.format || \'mm/dd/yy\'" [defaultDate]="model.focusedDate" [disabledDates]="getAdditional(\'disabledDates\')" [disabledDays]="getAdditional(\'disabledDays\')" [dynamicId]="bindId && model.id" [formControlName]="model.id" [hourFormat]="getAdditional(\'hourFormat\', \'24\')" [icon]="getAdditional(\'icon\', \'fa-calendar\')" [inline]="model.inline" [locale]="getAdditional(\'locale\', { firstDayOfWeek: 0, dayNames: [\'Sunday\', \'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\'], dayNamesShort: [\'Sun\', \'Mon\', \'Tue\', \'Wed\', \'Thu\', \'Fri\', \'Sat\'], dayNamesMin: [\'Su\', \'Mo\', \'Tu\', \'We\', \'Th\', \'Fr\', \'Sa\'], monthNames: [\'January\', \'February\', \'March\', \'April\', \'May\', \'June\', \'July\', \'August\', \'September\', \'October\', \'November\', \'December\'], monthNamesShort: [\'Jan\', \'Feb\', \'Mar\', \'Apr\', \'May\', \'Jun\', \'Jul\', \'Aug\', \'Sep\', \'Oct\', \'Nov\', \'Dec\'], today: \'Today\', clear: \'Clear\' })" [maxDate]="model.max" [maxDateCount]="getAdditional(\'maxDateCount\')" [minDate]="model.min" [monthNavigator]="getAdditional(\'monthNavigator\', false)" [ngClass]="getClass(\'element\', \'control\')" [placeholder]="model.placeholder" [selectionMode]="getAdditional(\'selectionMode\', \'single\')" [selectOtherMonths]="getAdditional(\'selectOtherMonths\', false)" [shortYearCutoff]="getAdditional(\'shortYearCutoff\', \'+10\')" [showButtonBar]="getAdditional(\'showButtonBar\', false)" [showIcon]="getAdditional(\'showIcon\', true)" [showOnFocus]="getAdditional(\'showOnFocus\', true)" [showOtherMonths]="getAdditional(\'showOtherMonths\', true)" [showSeconds]="model.showSeconds" [stepHour]="getAdditional(\'stepHour\', 1)" [stepMinute]="getAdditional(\'stepMinute\', 1)" [stepSecond]="getAdditional(\'stepSecond\', 1)" [tabindex]="model.tabIndex" [timeOnly]="model.type === \'TIMEPICKER\'" [utc]="getAdditional(\'utc\', false)" [yearNavigator]="getAdditional(\'yearNavigator\', false)" [yearRange]="getAdditional(\'yearRange\')" (onBlur)="onBlur($event)" (onClearClick)="onCustomEvent($event, \'onClearClick\')" (onClose)="onCustomEvent($event, \'onClose\')" (onFocus)="onFocus($event)" (onInput)="onValueChange($event)" (onSelect)="onValueChange($event)" (onTodayClick)="onCustomEvent($event, \'onTodayClick\')"></p-calendar><p-checkbox *ngSwitchCase="4" #pCheckbox binary="true" [dynamicId]="bindId && model.id" [formControlName]="model.id" [label]="model.label" [name]="model.name" [ngClass]="getClass(\'element\', \'control\')" [tabindex]="model.tabIndex" [value]="model.value" (onChange)="onValueChange($event)"></p-checkbox><p-chips *ngSwitchCase="5" #pChips [allowDuplicate]="getAdditional(\'allowDuplicate\', true)" [dynamicId]="bindId && model.id" [formControlName]="model.id" [ngClass]="getClass(\'element\', \'control\')" [tabindex]="model.tabIndex" (change)="onValueChange($event)" (onAdd)="onCustomEvent($event, \'onAdd\')" (onRemove)="onCustomEvent($event, \'onRemove\')"></p-chips><p-colorPicker *ngSwitchCase="6" #pColorPicker [dynamicId]="bindId && model.id" [format]="model.format || \'hex\'" [formControlName]="model.id" [inline]="model.inline" [ngClass]="getClass(\'element\',\'control\')" [tabindex]="model.tabIndex" (onChange)="onValueChange($event)"></p-colorPicker><p-dropdown *ngSwitchCase="7" #pDropdown [autoWidth]="getAdditional(\'autoWidth\', true)" [dropdownIcon]="getAdditional(\'dropdownIcon\', \'fa fa-fw fa-caret-down\')" [dynamicId]="bindId && model.id" [editable]="getAdditional(\'editable\', false)" [filter]="model.filterable" [filterBy]="getAdditional(\'filterBy\', null)" [filterPlaceholder]="getAdditional(\'filterPlaceholder\', null)" [formControlName]="model.id" [ngClass]="getClass(\'element\', \'control\')" [options]="model.options" [resetFilterOnHide]="getAdditional(\'resetFilterOnHide\', false)" [scrollHeight]="getAdditional(\'scrollHeight\', \'200px\')" [tabindex]="model.tabIndex" (onBlur)="onBlur($event)" (onChange)="onValueChange($event)" (onFocus)="onFocus($event)"></p-dropdown><p-editor *ngSwitchCase="8" #pEditor [dynamicId]="bindId && model.id" [formats]="getAdditional(\'formats\', null)" [formControlName]="model.id" [ngClass]="getClass(\'element\',\'control\')" (onSelectionChange)="onCustomEvent($event, \'onSelectionChange\')" (onTextChange)="onValueChange($event)"></p-editor><ng-container *ngSwitchCase="10"><input pInputText #pInputText [attr.accept]="model.accept" [attr.list]="model.listId" [attr.max]="model.max" [attr.min]="model.min" [attr.multiple]="model.multiple" [attr.step]="model.step" [autocomplete]="model.autoComplete" [autofocus]="model.autoFocus" [dynamicId]="bindId && model.id" [formControlName]="model.id" [maxlength]="model.maxLength" [minlength]="model.minLength" [name]="model.name" [ngClass]="getClass(\'element\', \'control\')" [pattern]="model.pattern" [placeholder]="model.placeholder" [readonly]="model.readOnly" [required]="model.required" [spellcheck]="model.spellCheck" [tabindex]="model.tabIndex" [type]="model.inputType" (blur)="onBlur($event)" (change)="onValueChange($event)" (focus)="onFocus($event)"><datalist *ngIf="hasList" [id]="model.listId"><option *ngFor="let option of model.list" [value]="option"></option></datalist></ng-container><p-inputMask *ngSwitchCase="11" #pInputMask [autoClear]="getAdditional(\'autoClear\', true)" [dynamicId]="bindId && model.id" [formControlName]="model.id" [mask]="model.mask" [ngClass]="getClass(\'element\', \'control\')" [placeholder]="model.placeholder" [readonly]="model.readOnly" [slotChar]="getAdditional(\'slotChar\', \'_\')" [tabindex]="model.tabIndex" (change)="onValueChange($event)" (onBlur)="onBlur($event)" (onComplete)="onCustomEvent($event, \'onComplete\')" (onFocus)="onFocus($event)"></p-inputMask><p-inputSwitch *ngSwitchCase="12" #pInputSwitch [dynamicId]="bindId && model.id" [formControlName]="model.id" [ngClass]="getClass(\'element\', \'control\')" [onLabel]="model.onLabel" [offLabel]="model.offLabel" [tabindex]="model.tabIndex" (onChange)="onValueChange($event)"></p-inputSwitch><p-multiSelect *ngSwitchCase="13" #pMultiSelect [defaultLabel]="getAdditional(\'defaultLabel\', \'Choose\')" [displaySelectedLabel]="getAdditional(\'displaySelectedLabel\', true)" [dropdownIcon]="getAdditional(\'dropdownIcon\', \'fa fa-fw fa-caret-down\')" [dynamicId]="bindId && model.id" [filter]="model.filterable" [formControlName]="model.id" [maxSelectedLabels]="getAdditional(\'maxSelectedLabels\', 3)" [ngClass]="getClass(\'element\', \'control\')" [options]="model.options" [overlayVisible]="getAdditional(\'overlayVisible\', false)" [resetFilterOnHide]="getAdditional(\'resetFilterOnHide\', false)" [scrollHeight]="getAdditional(\'scrollHeight\', \'200px\')" [selectedItemsLabel]="getAdditional(\'selectedItemsLabel\', \'{0} items selected\')" [showToggleAll]="getAdditional(\'showToggleAll\', true)" [tabindex]="model.tabIndex" (onBlur)="onBlur($event)" (onChange)="onValueChange($event)" (onFocus)="onFocus($event)"></p-multiSelect><p-rating *ngSwitchCase="15" #pRating [cancel]="getAdditional(\'cancel\', true)" [dynamicId]="bindId && model.id" [formControlName]="model.id" [iconCancelClass]="getAdditional(\'iconCancelClass\', \'fa-ban\')" [iconOffClass]="getAdditional(\'iconOffClass\', \'fa-star-o\')" [iconOnClass]="getAdditional(\'iconOnClass\', \'fa-star\')" [ngClass]="getClass(\'element\', \'control\')" [stars]="model.max" (onCancel)="onCustomEvent($event, \'onCancel\')" (onRate)="onValueChange($event)"></p-rating><p-slider *ngSwitchCase="16" #pSlider [animate]="getAdditional(\'animate\', false)" [dynamicId]="bindId && model.id" [formControlName]="model.id" [min]="model.min" [max]="model.max" [ngClass]="getClass(\'element\', \'control\')" [orientation]="model.vertical ? \'vertical\' : \'horizontal\'" [range]="getAdditional(\'range\', false)" [step]="model.step" (onChange)="onValueChange($event)" (onSlideEnd)="onCustomEvent($event, \'onSlideEnd\')"></p-slider><p-spinner *ngSwitchCase="17" #pSpinner [decimalSeparator]="getAdditional(\'decimalSeparator\', \'.\')" [dynamicId]="bindId && model.id" [formatInput]="getAdditional(\'formatInput\', true)" [formControlName]="model.id" [min]="model.min" [max]="model.max" [ngClass]="getClass(\'element\', \'control\')" [placeholder]="model.placeholder" [step]="model.step || 1" [tabindex]="model.tabIndex" [thousandSeparator]="getAdditional(\'thousandSeparator\', \',\')" (onBlur)="onBlur($event)" (onChange)="onValueChange($event)" (onFocus)="onFocus($event)"></p-spinner><textarea *ngSwitchCase="18" pInputTextarea #pInputTextarea [cols]="model.cols" [dynamicId]="bindId && model.id" [formControlName]="model.id" [maxlength]="model.maxLength" [minlength]="model.minLength" [name]="model.name" [ngClass]="getClass(\'element\', \'control\')" [placeholder]="model.placeholder" [readonly]="model.readOnly" [required]="model.required" [rows]="model.rows" [spellcheck]="model.spellCheck" [tabindex]="model.tabIndex" [wrap]="model.wrap" (blur)="onBlur($event)" (change)="onValueChange($event)" (focus)="onFocus($event)" (onResize)="onCustomEvent($event, \'onResize\')"></textarea></div></ng-container><ul *ngIf="showErrorMessages" [ngClass]="[getClass(\'element\', \'errors\'), getClass(\'grid\', \'errors\')]"><li *ngFor="let message of errorMessages" class="ui-message ui-messages-error ui-corner-all">{{ message }}</li></ul><ng-container *ngTemplateOutlet="templates[1]?.templateRef; context: model"></ng-container><ng-content></ng-content></div>'}]}],o.ctorParameters=function(){return[{type:t.ChangeDetectorRef},{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService}]},o.propDecorators={contentTemplateList:[{type:t.ContentChildren,args:[n.DynamicTemplateDirective]}],inputTemplateList:[{type:t.Input,args:["templates"]}],bindId:[{type:t.Input}],context:[{type:t.Input}],group:[{type:t.Input}],hasErrorMessaging:[{type:t.Input}],layout:[{type:t.Input}],model:[{type:t.Input}],blur:[{type:t.Output,args:["dfBlur"]}],change:[{type:t.Output,args:["dfChange"]}],focus:[{type:t.Output,args:["dfFocus"]}],customEvent:[{type:t.Output,args:["pEvent"]}],pViewChild:[{type:t.ViewChild,args:[i]}]},o}(n.DynamicFormControlComponent),u=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),g=function(e){function o(o,n){var l=e.call(this,o,n)||this;return l.formService=o,l.layoutService=n,l.blur=new t.EventEmitter,l.change=new t.EventEmitter,l.focus=new t.EventEmitter,l.customEvent=new t.EventEmitter,l}return u(o,e),o.decorators=[{type:t.Component,args:[{selector:"dynamic-primeng-form",template:'<dynamic-primeng-form-control *ngFor="let model of formModel; trackBy: trackByFn" [group]="formGroup" [hasErrorMessaging]="model.hasErrorMessages" [hidden]="model.hidden" [layout]="formLayout" [model]="model" [ngClass]="[getClass(model, \'element\', \'host\'), getClass(model, \'grid\', \'host\')]" [templates]="templates" (dfBlur)="onEvent($event, \'blur\')" (dfChange)="onEvent($event, \'change\')" (dfFocus)="onEvent($event, \'focus\')" (pEvent)="onEvent($event, \'custom\')"></dynamic-primeng-form-control>'}]}],o.ctorParameters=function(){return[{type:n.DynamicFormService},{type:n.DynamicFormLayoutService}]},o.propDecorators={formGroup:[{type:t.Input,args:["group"]}],formModel:[{type:t.Input,args:["model"]}],formLayout:[{type:t.Input,args:["layout"]}],blur:[{type:t.Output,args:["dfBlur"]}],change:[{type:t.Output,args:["dfChange"]}],focus:[{type:t.Output,args:["dfFocus"]}],customEvent:[{type:t.Output,args:["pEvent"]}],templates:[{type:t.ContentChildren,args:[n.DynamicTemplateDirective]}],components:[{type:t.ViewChildren,args:[c]}]},o}(n.DynamicFormComponent),C=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[a.CommonModule,o.ReactiveFormsModule,n.DynamicFormsCoreModule,l.AutoCompleteModule,l.CalendarModule,l.CheckboxModule,l.ChipsModule,l.ColorPickerModule,l.DropdownModule,l.EditorModule,l.InputMaskModule,l.InputSwitchModule,l.InputTextModule,l.InputTextareaModule,l.MultiSelectModule,l.RadioButtonModule,l.RatingModule,l.SliderModule,l.SpinnerModule],declarations:[c,g],exports:[n.DynamicFormsCoreModule,c,g]}]}],e.ctorParameters=function(){return[]},e}();e.DynamicPrimeNGFormComponent=g,e.PrimeNGFormControlType=r,e.PRIME_NG_VIEW_CHILD_SELECTOR=i,e.PRIME_NG_AUTOCOMPLETE_TEMPLATE_DIRECTIVES=d,e.PRIME_NG_CHIPS_TEMPLATE_DIRECTIVES=s,e.PRIME_NG_DROPDOWN_LIST_TEMPLATE_DIRECTIVES=m,e.DynamicPrimeNGFormControlComponent=c,e.DynamicFormsPrimeNGUIModule=C,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ui-primeng.umd.min.js.map
